{
  "address": "0x12210facfE3e25D4D8d48184Af5899c515be5Cd0",
  "abi": [
    {
      "inputs": [],
      "name": "UnequalArrayLengths",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "DAOCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoFactory",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "daoImplementation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessControlImplementation",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "daoName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "roles",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "rolesAdmins",
              "type": "string[]"
            },
            {
              "internalType": "address[][]",
              "name": "members",
              "type": "address[][]"
            },
            {
              "internalType": "string[]",
              "name": "daoFunctionDescs",
              "type": "string[]"
            },
            {
              "internalType": "string[][]",
              "name": "daoActionRoles",
              "type": "string[][]"
            }
          ],
          "internalType": "struct IDAOFactory.CreateDAOParams",
          "name": "createDAOParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "name": "createDAOAndExecute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd91cbc38aca2fd989e62bbcca7175a60d793b86d5619ce07c7a1fac2fadae4a1",
  "receipt": {
    "to": null,
    "from": "0x04B32DA1E6b0ecd8435b2d1B3F06bC2A6c4db9aE",
    "contractAddress": "0x12210facfE3e25D4D8d48184Af5899c515be5Cd0",
    "transactionIndex": 4,
    "gasUsed": "820987",
    "logsBloom": "0x
    "blockHash": "0xf952150f83c27a376b2976f7a6bc62e5322c1746208f95a1963211e45f01ee26",
    "transactionHash": "0xd91cbc38aca2fd989e62bbcca7175a60d793b86d5619ce07c7a1fac2fadae4a1",
    "logs": [],
    "blockNumber": 7104986,
    "cumulativeGasUsed": "1287593",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "deb3505c2af47b2869dc091c6113e164",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UnequalArrayLengths\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"DAOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"daoImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControlImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"rolesAdmins\",\"type\":\"string[]\"},{\"internalType\":\"address[][]\",\"name\":\"members\",\"type\":\"address[][]\"},{\"internalType\":\"string[]\",\"name\":\"daoFunctionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"daoActionRoles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IDAOFactory.CreateDAOParams\",\"name\":\"createDAOParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"createDAOAndExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"For the Metafactory to be able to call the execute function on the created DAO, it needs to be givena role that has permissions to call this function. It is critical to have the MetaFactory then revokethis role within the same transaction, so that the MetaFactory cannot be used to perform arbitrary execution calls on the DAO in the future.\",\"kind\":\"dev\",\"methods\":{\"createDAOAndExecute(address,(address,address,bytes32,string,string[],string[],address[][],string[],string[][]),address[],uint256[],bytes[])\":{\"params\":{\"calldatas\":\"An array of bytes defining the function calls\",\"createDAOParams\":\"The struct of parameters used for creating the DAO and Access Control contracts\",\"daoFactory\":\"The address of the DAO factory\",\"targets\":\"An array of addresses to target for the function calls\",\"values\":\"An array of ether values to send with the function calls\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"An interface ID bytes4 as defined by ERC-165\"},\"returns\":{\"_0\":\"bool Indicates whether the interface is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDAOAndExecute(address,(address,address,bytes32,string,string[],string[],address[][],string[],string[][]),address[],uint256[],bytes[])\":{\"notice\":\"Creates a DAO, Access Control, and any modules specified\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether a given interface ID is supported\"}},\"notice\":\"A factory contract for deploying DAOs along with any desired modules within one transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaFactory.sol\":\"MetaFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\":{\"content\":\"import \\\"./IModuleBase.sol\\\";\\r\\n\\r\\n//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAO {\\r\\n    error Unauthorized(bytes32 role, address account);\\r\\n    error UnequalArrayLengths();\\r\\n\\r\\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\\r\\n\\r\\n    /// @notice Function for initializing the Dao\\r\\n    /// @param _accessControl The address of the access control contract\\r\\n    /// @param _moduleFactory The address of the module factory\\r\\n    /// @param _name Name of the Dao\\r\\n    function initialize(address _accessControl, address _moduleFactory, string calldata _name) external;\\r\\n\\r\\n    /// @notice A function for executing function calls from the DAO\\r\\n    /// @param targets An array of addresses to target for the function calls\\r\\n    /// @param values An array of ether values to send with the function calls\\r\\n    /// @param calldatas An array of bytes defining the function calls\\r\\n    function execute(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata calldatas\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x016f9ae3dc444dfebc90dcd606aac7d4fc72c1766c584ef91552990563a016fc\",\"license\":\"Unlicense\"},\"@fractal-framework/core-contracts/contracts/interfaces/IDAOAccessControl.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAOAccessControl {\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        string adminRole;\\r\\n    }\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n    error MissingRole(address account, string role);\\r\\n    error OnlySelfRenounce();\\r\\n\\r\\n    event ActionRoleAdded(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event ActionRoleRemoved(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event RoleAdminChanged(\\r\\n        string role,\\r\\n        string previousAdminRole,\\r\\n        string adminRole\\r\\n    );\\r\\n    event RoleGranted(string role, address account, address admin);\\r\\n    event RoleRevoked(string role, address account, address admin);\\r\\n\\r\\n    /// @notice Initialize DAO action and role permissions\\r\\n    /// @param dao Address to receive DAO role\\r\\n    /// @param roles What permissions are assigned to\\r\\n    /// @param roleAdmins Roles which have the ability to remove or add members\\r\\n    /// @param members Addresses to be granted the specified roles\\r\\n    /// @param targets Contract addresses for actions to be defined on\\r\\n    /// @param functionDescs Function descriptions used to define actions\\r\\n    /// @param actionRoles Roles being granted permission for an action\\r\\n    function initialize(\\r\\n        address dao,\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members,\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory actionRoles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses and defines admin roles\\r\\n    /// @notice This function can only be called by the DAO\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function daoGrantRolesAndAdmins(\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses\\r\\n    /// @notice This function can only be called by the DAO\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function daoGrantRoles(string[] memory roles, address[][] memory members)\\r\\n        external;\\r\\n\\r\\n    /// @notice Authorizes roles to execute the specified actions\\r\\n    /// @notice This function can only be called by the DAO\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function descriptions used to define the actions\\r\\n    /// @param roles Roles being granted permission for an action\\r\\n    function daoAddActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Removes autorization for roles to execute the specified actions\\r\\n    /// @notice This function can only be called by the DAO\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function description used to define the actions\\r\\n    /// @param roles Roles that action permissions are being removed on\\r\\n    function daoRemoveActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants a role to the specified address\\r\\n    /// @notice This function can only be called by an admin of the specified role\\r\\n    /// @param role The role being granted\\r\\n    /// @param account The address being granted the specified role\\r\\n    function adminGrantRole(string memory role, address account)\\r\\n        external;\\r\\n\\r\\n    /// @notice Revokes a role from the specified address\\r\\n    /// @notice This function can only be called by an admin of the specified role\\r\\n    /// @param role The role being revoked\\r\\n    /// @param account The address the role is being revoked from\\r\\n    function adminRevokeRole(string memory role, address account)\\r\\n        external;\\r\\n\\r\\n    /// @notice Enables an address to remove one of its own roles\\r\\n    /// @notice This function can only be called by the account specified\\r\\n    /// @param role The role being renounced\\r\\n    /// @param account The address renouncing the role\\r\\n    function userRenounceRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Checks if a caller has the permissions to execute the specific action\\r\\n    /// @param caller Address attempting to execute the action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param sig The function signature used to define the action\\r\\n    function actionIsAuthorized(\\r\\n        address caller,\\r\\n        address target,\\r\\n        bytes4 sig\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns the roles autorized to execute the specified action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc The function description used to define the action\\r\\n    function getActionRoles(address target, string memory functionDesc)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory roles);\\r\\n\\r\\n    /// @notice Checks if a specific role is authorized for an action\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc Function description used to define the action\\r\\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\\r\\n    function isRoleAuthorized(\\r\\n        string calldata role,\\r\\n        address target,\\r\\n        string memory functionDesc\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns whether the account has been granted the role\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param account Address that the role authorization is being check on\\r\\n    /// @return boolean Indicates whether the address has been granted the role\\r\\n    function hasRole(string memory role, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice Returns the role that is the admin of the specified role\\r\\n    /// @param role Role that the admin role is being returned for\\r\\n    /// @return string The admin role of the specified role\\r\\n    function getRoleAdmin(string memory role)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    /// @return string The string \\\"DAO_ROLE\\\"\\r\\n    function DAO_ROLE() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8862f578b4fe6a79370b5cbe896e59df4722e95dbb1b0d2e286e335915ed616c\",\"license\":\"Unlicense\"},\"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAOFactory {\\r\\n    struct CreateDAOParams {\\r\\n        address daoImplementation;\\r\\n        address accessControlImplementation;\\r\\n        bytes32 salt;\\r\\n        string daoName;\\r\\n        string[] roles;\\r\\n        string[] rolesAdmins;\\r\\n        address[][] members;\\r\\n        string[] daoFunctionDescs;\\r\\n        string[][] daoActionRoles;\\r\\n    }\\r\\n\\r\\n    event DAOCreated(address indexed daoAddress, address indexed accessControl, address indexed sender, address creator);\\r\\n\\r\\n    /// @notice Creates a DAO with an access control contract\\r\\n    /// @param creator Address of the Dao Creator\\r\\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\\r\\n    /// @return dao The address of the deployed DAO proxy contract\\r\\n    /// @return accessControl The address of the deployed access control proxy contract\\r\\n    function createDAO(address creator, CreateDAOParams calldata createDAOParams)\\r\\n        external\\r\\n        returns (address, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x5e71fcec37fb9b7a4b34776419df1489d3d5a04e9981c1daa7960931042c2216\",\"license\":\"Unlicense\"},\"@fractal-framework/core-contracts/contracts/interfaces/IModuleBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IDAOAccessControl.sol\\\";\\r\\n\\r\\ninterface IModuleBase {\\r\\n    error NotAuthorized();\\r\\n\\r\\n    /// @return IDAOAccessControl The Access control interface\\r\\n    function accessControl() external view returns (IDAOAccessControl);\\r\\n\\r\\n    /// @notice Returns whether a given interface ID is supported\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    /// @return string The string \\\"Name\\\"\\r\\n    function name() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x92e9bb20413196a9b8248ac3aa196052410950cbfb9c07080796b3fc786efb7c\",\"license\":\"Unlicense\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetaFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IMetaFactory.sol\\\";\\r\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\\\";\\r\\n\\r\\n/// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\r\\n/// @dev For the Metafactory to be able to call the execute function on the created DAO, it needs to be given\\r\\n/// @dev a role that has permissions to call this function. It is critical to have the MetaFactory then revoke\\r\\n/// @dev this role within the same transaction, so that the MetaFactory cannot be used to perform arbitrary \\r\\n/// @dev execution calls on the DAO in the future.\\r\\ncontract MetaFactory is IMetaFactory, ERC165 {\\r\\n  /// @notice Creates a DAO, Access Control, and any modules specified\\r\\n  /// @param daoFactory The address of the DAO factory\\r\\n  /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n  /// @param targets An array of addresses to target for the function calls\\r\\n  /// @param values An array of ether values to send with the function calls\\r\\n  /// @param calldatas An array of bytes defining the function calls\\r\\n  function createDAOAndExecute(\\r\\n    address daoFactory,\\r\\n    IDAOFactory.CreateDAOParams memory createDAOParams,\\r\\n    address[] calldata targets,\\r\\n    uint256[] calldata values,\\r\\n    bytes[] calldata calldatas\\r\\n  ) external {\\r\\n    createDAO(daoFactory, createDAOParams);\\r\\n    execute(targets, values, calldatas);\\r\\n  }\\r\\n\\r\\n  /// @notice A function for creating the DAO and Access Control contracts\\r\\n  /// @param daoFactory The address of the DAO factory\\r\\n  /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n  function createDAO(\\r\\n    address daoFactory,\\r\\n    IDAOFactory.CreateDAOParams memory createDAOParams\\r\\n  ) internal {\\r\\n    (address dao, address accessControl) = IDAOFactory(daoFactory).createDAO(\\r\\n      msg.sender,\\r\\n      createDAOParams\\r\\n    );\\r\\n\\r\\n    emit DAOCreated(dao, accessControl, msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice A function for executing function calls to deploy an MVD, modules, and initialize them\\r\\n  /// @param targets An array of addresses to target for the function calls\\r\\n  /// @param values An array of ether values to send with the function calls\\r\\n  /// @param calldatas An array of bytes defining the function calls\\r\\n  function execute(\\r\\n    address[] calldata targets,\\r\\n    uint256[] calldata values,\\r\\n    bytes[] calldata calldatas\\r\\n  ) internal {\\r\\n    if (targets.length != values.length || targets.length != calldatas.length)\\r\\n      revert UnequalArrayLengths();\\r\\n    string memory errorMessage = \\\"MetaFactory: call reverted without message\\\";\\r\\n    uint256 targetlength = targets.length;\\r\\n    for (uint256 i = 0; i < targetlength; ) {\\r\\n      (bool success, bytes memory returndata) = targets[i].call{\\r\\n        value: values[i]\\r\\n      }(calldatas[i]);\\r\\n      Address.verifyCallResult(success, returndata, errorMessage);\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n    emit Executed(targets, values, calldatas);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns whether a given interface ID is supported\\r\\n  /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n  /// @return bool Indicates whether the interface is supported\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IMetaFactory).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xfaa1f3e64dceb4fedd24038327627666c23fff2f3a6e26b51e7bad4c8629dfa6\",\"license\":\"Unlicense\"},\"contracts/interfaces/IMetaFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\\\";\\r\\n\\r\\ninterface IMetaFactory {\\r\\n    event DAOCreated(address indexed daoAddress, address indexed accessControl, address indexed creator);\\r\\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n\\r\\n    /// @notice Creates a DAO, Access Control, and any modules specified\\r\\n    /// @param daoFactory The address of the DAO factory\\r\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n    /// @param targets An array of addresses to target for the function calls\\r\\n    /// @param values An array of ether values to send with the function calls\\r\\n    /// @param calldatas An array of bytes defining the function calls\\r\\n    function createDAOAndExecute(\\r\\n        address daoFactory,\\r\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata calldatas\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3deb4d9632b45ca093d5f1e7bf4386422f53a6a0343b2c0118a8dc553bd27562\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610de4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806308e5657114610062575b600080fd5b61004e61004936600461035d565b610077565b604051901515815260200160405180910390f35b6100756100703660046106fd565b6100ae565b005b60006001600160e01b031982166308e5657160e01b14806100a857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6100b888886100d0565b6100c6868686868686610197565b5050505050505050565b600080836001600160a01b0316635e13cf2b33856040518363ffffffff1660e01b8152600401610101929190610a50565b60408051808303816000875af115801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190610b5e565b91509150336001600160a01b0316816001600160a01b0316836001600160a01b03167f552b78c92c2932581cee967b6925eea60f5d345efa257d0432a333a6b55dc2b160405160405180910390a450505050565b84831415806101a65750848114155b156101c4576040516311e86f7360e01b815260040160405180910390fd5b60006040518060600160405280602a8152602001610d85602a913990508560005b818110156102c8576000808a8a8481811061020257610202610b98565b90506020020160208101906102179190610bae565b6001600160a01b031689898581811061023257610232610b98565b9050602002013588888681811061024b5761024b610b98565b905060200281019061025d9190610bcb565b60405161026b929190610c12565b60006040518083038185875af1925050503d80600081146102a8576040519150601f19603f3d011682016040523d82523d6000602084013e6102ad565b606091505b50915091506102bd828287610314565b5050506001016101e5565b507f56bfe74cbe37ff0615c4d027adf14b7793c59322d51411a0f5a26eb77abac09588888888888860405161030296959493929190610ccf565b60405180910390a15050505050505050565b60608315610323575081610356565b8251156103335782518084602001fd5b8160405162461bcd60e51b815260040161034d9190610d71565b60405180910390fd5b9392505050565b60006020828403121561036f57600080fd5b81356001600160e01b03198116811461035657600080fd5b6001600160a01b038116811461039c57600080fd5b50565b80356103aa81610387565b919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156103e9576103e96103af565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610418576104186103af565b604052919050565b600082601f83011261043157600080fd5b813567ffffffffffffffff81111561044b5761044b6103af565b61045e601f8201601f19166020016103ef565b81815284602083860101111561047357600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156104aa576104aa6103af565b5060051b60200190565b600082601f8301126104c557600080fd5b813560206104da6104d583610490565b6103ef565b82815260059290921b840181019181810190868411156104f957600080fd5b8286015b8481101561053957803567ffffffffffffffff81111561051d5760008081fd5b61052b8986838b0101610420565b8452509183019183016104fd565b509695505050505050565b600082601f83011261055557600080fd5b813560206105656104d583610490565b828152600592831b850182019282820191908785111561058457600080fd5b8387015b8581101561062457803567ffffffffffffffff8111156105a85760008081fd5b8801603f81018a136105ba5760008081fd5b8581013560406105cc6104d583610490565b82815291851b8301810191888101908d8411156105e95760008081fd5b938201935b83851015610613578435925061060383610387565b82825293890193908901906105ee565b885250505093850193508401610588565b5090979650505050505050565b600082601f83011261064257600080fd5b813560206106526104d583610490565b82815260059290921b8401810191818101908684111561067157600080fd5b8286015b8481101561053957803567ffffffffffffffff8111156106955760008081fd5b6106a38986838b01016104b4565b845250918301918301610675565b60008083601f8401126106c357600080fd5b50813567ffffffffffffffff8111156106db57600080fd5b6020830191508360208260051b85010111156106f657600080fd5b9250929050565b60008060008060008060008060a0898b03121561071957600080fd5b883561072481610387565b9750602089013567ffffffffffffffff8082111561074157600080fd5b908a0190610120828d03121561075657600080fd5b61075e6103c5565b6107678361039f565b81526107756020840161039f565b60208201526040830135604082015260608301358281111561079657600080fd5b6107a28e828601610420565b6060830152506080830135828111156107ba57600080fd5b6107c68e8286016104b4565b60808301525060a0830135828111156107de57600080fd5b6107ea8e8286016104b4565b60a08301525060c08301358281111561080257600080fd5b61080e8e828601610544565b60c08301525060e08301358281111561082657600080fd5b6108328e8286016104b4565b60e083015250610100808401358381111561084c57600080fd5b6108588f828701610631565b8284015250508099505060408b013591508082111561087657600080fd5b6108828c838d016106b1565b909850965060608b013591508082111561089b57600080fd5b6108a78c838d016106b1565b909650945060808b01359150808211156108c057600080fd5b506108cd8b828c016106b1565b999c989b5096995094979396929594505050565b6000815180845260005b81811015610907576020818501810151868301820152016108eb565b81811115610919576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156109765782840389526109648483516108e1565b9885019893509084019060010161094c565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156109fa578385038a52825180518087529087019087870190845b818110156109e55783516001600160a01b0316835292890192918901916001016109c0565b50509a87019a955050918501916001016109a2565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015610976578284038952610a3e84835161092e565b98850198935090840190600101610a26565b6001600160a01b03831681526040602082018190528251610a7b918301906001600160a01b03169052565b60006020830151610a9760608401826001600160a01b03169052565b506040830151608083015260608301516101208060a0850152610abe6101608501836108e1565b91506080850151603f19808685030160c0870152610adc848361092e565b935060a08701519150808685030160e0870152610af9848361092e565b935060c08701519150610100818786030181880152610b188584610983565b945060e08801519250818786030184880152610b34858461092e565b94508088015193505080868503016101408701525050610b548282610a08565b9695505050505050565b60008060408385031215610b7157600080fd5b8251610b7c81610387565b6020840151909250610b8d81610387565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610bc057600080fd5b813561035681610387565b6000808335601e19843603018112610be257600080fd5b83018035915067ffffffffffffffff821115610bfd57600080fd5b6020019150368190038213156106f657600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156109765782840389528135601e19883603018112610c8657600080fd5b8701803567ffffffffffffffff811115610c9f57600080fd5b803603891315610cae57600080fd5b610cbb8682898501610c22565b9a87019a9550505090840190600101610c65565b6060808252810186905260008760808301825b89811015610d12578235610cf581610387565b6001600160a01b0316825260209283019290910190600101610ce2565b5083810360208501528681526001600160fb1b03871115610d3257600080fd5b8660051b91508188602083013781810191505060208101600081526020848303016040850152610d63818688610c4b565b9a9950505050505050505050565b60208152600061035660208301846108e156fe4d657461466163746f72793a2063616c6c20726576657274656420776974686f7574206d657373616765a264697066735822122058dfe76fddd6fa8739708a548f76251d0dba2c7f3b8fec06b9b0dd1a4a36c14564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806308e5657114610062575b600080fd5b61004e61004936600461035d565b610077565b604051901515815260200160405180910390f35b6100756100703660046106fd565b6100ae565b005b60006001600160e01b031982166308e5657160e01b14806100a857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6100b888886100d0565b6100c6868686868686610197565b5050505050505050565b600080836001600160a01b0316635e13cf2b33856040518363ffffffff1660e01b8152600401610101929190610a50565b60408051808303816000875af115801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190610b5e565b91509150336001600160a01b0316816001600160a01b0316836001600160a01b03167f552b78c92c2932581cee967b6925eea60f5d345efa257d0432a333a6b55dc2b160405160405180910390a450505050565b84831415806101a65750848114155b156101c4576040516311e86f7360e01b815260040160405180910390fd5b60006040518060600160405280602a8152602001610d85602a913990508560005b818110156102c8576000808a8a8481811061020257610202610b98565b90506020020160208101906102179190610bae565b6001600160a01b031689898581811061023257610232610b98565b9050602002013588888681811061024b5761024b610b98565b905060200281019061025d9190610bcb565b60405161026b929190610c12565b60006040518083038185875af1925050503d80600081146102a8576040519150601f19603f3d011682016040523d82523d6000602084013e6102ad565b606091505b50915091506102bd828287610314565b5050506001016101e5565b507f56bfe74cbe37ff0615c4d027adf14b7793c59322d51411a0f5a26eb77abac09588888888888860405161030296959493929190610ccf565b60405180910390a15050505050505050565b60608315610323575081610356565b8251156103335782518084602001fd5b8160405162461bcd60e51b815260040161034d9190610d71565b60405180910390fd5b9392505050565b60006020828403121561036f57600080fd5b81356001600160e01b03198116811461035657600080fd5b6001600160a01b038116811461039c57600080fd5b50565b80356103aa81610387565b919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156103e9576103e96103af565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610418576104186103af565b604052919050565b600082601f83011261043157600080fd5b813567ffffffffffffffff81111561044b5761044b6103af565b61045e601f8201601f19166020016103ef565b81815284602083860101111561047357600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156104aa576104aa6103af565b5060051b60200190565b600082601f8301126104c557600080fd5b813560206104da6104d583610490565b6103ef565b82815260059290921b840181019181810190868411156104f957600080fd5b8286015b8481101561053957803567ffffffffffffffff81111561051d5760008081fd5b61052b8986838b0101610420565b8452509183019183016104fd565b509695505050505050565b600082601f83011261055557600080fd5b813560206105656104d583610490565b828152600592831b850182019282820191908785111561058457600080fd5b8387015b8581101561062457803567ffffffffffffffff8111156105a85760008081fd5b8801603f81018a136105ba5760008081fd5b8581013560406105cc6104d583610490565b82815291851b8301810191888101908d8411156105e95760008081fd5b938201935b83851015610613578435925061060383610387565b82825293890193908901906105ee565b885250505093850193508401610588565b5090979650505050505050565b600082601f83011261064257600080fd5b813560206106526104d583610490565b82815260059290921b8401810191818101908684111561067157600080fd5b8286015b8481101561053957803567ffffffffffffffff8111156106955760008081fd5b6106a38986838b01016104b4565b845250918301918301610675565b60008083601f8401126106c357600080fd5b50813567ffffffffffffffff8111156106db57600080fd5b6020830191508360208260051b85010111156106f657600080fd5b9250929050565b60008060008060008060008060a0898b03121561071957600080fd5b883561072481610387565b9750602089013567ffffffffffffffff8082111561074157600080fd5b908a0190610120828d03121561075657600080fd5b61075e6103c5565b6107678361039f565b81526107756020840161039f565b60208201526040830135604082015260608301358281111561079657600080fd5b6107a28e828601610420565b6060830152506080830135828111156107ba57600080fd5b6107c68e8286016104b4565b60808301525060a0830135828111156107de57600080fd5b6107ea8e8286016104b4565b60a08301525060c08301358281111561080257600080fd5b61080e8e828601610544565b60c08301525060e08301358281111561082657600080fd5b6108328e8286016104b4565b60e083015250610100808401358381111561084c57600080fd5b6108588f828701610631565b8284015250508099505060408b013591508082111561087657600080fd5b6108828c838d016106b1565b909850965060608b013591508082111561089b57600080fd5b6108a78c838d016106b1565b909650945060808b01359150808211156108c057600080fd5b506108cd8b828c016106b1565b999c989b5096995094979396929594505050565b6000815180845260005b81811015610907576020818501810151868301820152016108eb565b81811115610919576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156109765782840389526109648483516108e1565b9885019893509084019060010161094c565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156109fa578385038a52825180518087529087019087870190845b818110156109e55783516001600160a01b0316835292890192918901916001016109c0565b50509a87019a955050918501916001016109a2565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015610976578284038952610a3e84835161092e565b98850198935090840190600101610a26565b6001600160a01b03831681526040602082018190528251610a7b918301906001600160a01b03169052565b60006020830151610a9760608401826001600160a01b03169052565b506040830151608083015260608301516101208060a0850152610abe6101608501836108e1565b91506080850151603f19808685030160c0870152610adc848361092e565b935060a08701519150808685030160e0870152610af9848361092e565b935060c08701519150610100818786030181880152610b188584610983565b945060e08801519250818786030184880152610b34858461092e565b94508088015193505080868503016101408701525050610b548282610a08565b9695505050505050565b60008060408385031215610b7157600080fd5b8251610b7c81610387565b6020840151909250610b8d81610387565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610bc057600080fd5b813561035681610387565b6000808335601e19843603018112610be257600080fd5b83018035915067ffffffffffffffff821115610bfd57600080fd5b6020019150368190038213156106f657600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156109765782840389528135601e19883603018112610c8657600080fd5b8701803567ffffffffffffffff811115610c9f57600080fd5b803603891315610cae57600080fd5b610cbb8682898501610c22565b9a87019a9550505090840190600101610c65565b6060808252810186905260008760808301825b89811015610d12578235610cf581610387565b6001600160a01b0316825260209283019290910190600101610ce2565b5083810360208501528681526001600160fb1b03871115610d3257600080fd5b8660051b91508188602083013781810191505060208101600081526020848303016040850152610d63818688610c4b565b9a9950505050505050505050565b60208152600061035660208301846108e156fe4d657461466163746f72793a2063616c6c20726576657274656420776974686f7574206d657373616765a264697066735822122058dfe76fddd6fa8739708a548f76251d0dba2c7f3b8fec06b9b0dd1a4a36c14564736f6c634300080d0033",
  "devdoc": {
    "details": "For the Metafactory to be able to call the execute function on the created DAO, it needs to be givena role that has permissions to call this function. It is critical to have the MetaFactory then revokethis role within the same transaction, so that the MetaFactory cannot be used to perform arbitrary execution calls on the DAO in the future.",
    "kind": "dev",
    "methods": {
      "createDAOAndExecute(address,(address,address,bytes32,string,string[],string[],address[][],string[],string[][]),address[],uint256[],bytes[])": {
        "params": {
          "calldatas": "An array of bytes defining the function calls",
          "createDAOParams": "The struct of parameters used for creating the DAO and Access Control contracts",
          "daoFactory": "The address of the DAO factory",
          "targets": "An array of addresses to target for the function calls",
          "values": "An array of ether values to send with the function calls"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "An interface ID bytes4 as defined by ERC-165"
        },
        "returns": {
          "_0": "bool Indicates whether the interface is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDAOAndExecute(address,(address,address,bytes32,string,string[],string[],address[][],string[],string[][]),address[],uint256[],bytes[])": {
        "notice": "Creates a DAO, Access Control, and any modules specified"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether a given interface ID is supported"
      }
    },
    "notice": "A factory contract for deploying DAOs along with any desired modules within one transaction",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}